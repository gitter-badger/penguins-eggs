// apt-get instal nfs-kernel-server dnsmasq apache2 syslinux pxelinux

"use strict";

import Rsync from "./Rsync.js";
import Fabricator from "./fabricator.js";
let shell = require("shelljs");
let fs = require("fs");

class Eggs extends Fabricator {
  constructor(homeDir = "/home/artisan/fabricator", distroName = "default") {
    super(homeDir, distroName);

    // Variabili Eggs
    this._clientHostName = distroName; // $CLIENT_HOSTNAME
    this._clientUserFullName = "Artisan"; // $CLIENT_USERFULLNAME
    this._clientUserName = "artisan"; // $CLIENT_USERNAME
    this._clientPassword = "evoluzione"; // $CLIENT_PASSWORD
    this._clientIpAddress = "192.168.0.254"; //$IPADDRESS

    this._netDomainName = "lan"; // $CLIENTDOMAIN
    this._net = "192.168.0.0";
    this._netBootServer = "192.168.0.5";
    this._netNetmask = "255.255.255.0";
    this._netGateway = "192.168.0.1";
    this._netDns = "192.168.0.1";

    this._homeDir = homeDir;
    this._fsDir = `${homeDir}/fs`;
    this._distroName = distroName;
    this._kernelVer="4.9.0-3-amd64";
  }

  fstab() {
    let file = `${this._fsDir}/etc/fstab`;
    let text = `
  	# Generated by eggs
  	proc /proc proc defaults 0 0
  	/dev/nfs / nfs defaults 1 1

  	none /tmp tmpfs defaults 0 0
  	none /var/run tmpfs defaults 0 0
  	none /var/lock tmpfs defaults 0 0
  	none /var/tmp tmpfs defaults 0 0`;

    writeAndShow(file, text);
  }

  hostname() {
    let file = `${this._fsDir}/etc/hostname`;
    let text = distroName;
    writeAndShow(file, text);
  }

  resolvConf() {
    let file = `${this._fsDir}/etc/resolv.conf`;
    let text = `
# Generated by eggs
search localdomain.dom
nameserver ${this._netDns}`;

    writeAndShow(file, text);
  }

  resolvConfDBase() {
    let file = `${this._fsDir}/etc/resolvconf/resolv.conf.d/base`;
    let text = `
# Generated by eggs
search localdomain.dom
nameserver ${this._netDns}`;

    writeAndShow(file, text);
  }
  interfaces() {
    let file = `${this._fsDir}/etc/network/interfaces`;
    let text = `
# Generated by eggs
auto lo
iface lo inet loopback
iface eth0 inet manual`;

    writeAndShow(file, text);
  }

  hosts() {
    let file = `${this._fsDir}/etc/hosts`;
    let text = `# Generated by eggs
127.0.0.1 localhost.localdomain localhost ${this._clientHostName}
${this._clientIpAddress} ${this._clientHostName}.${this._netDomainName} ${this
      ._clientHostName}

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts`;

    writeAndShow(file, text);
  }

  tempInstaller() {
    let file = `${this._fsDir}/tempinstaller`;
    let text = `
#!/bin/bash
# Questo script Ã¨ stato generato da eggs
# Ottiene la lista degli utenti e li cancella ad esclusione di nobody.
USERS=\$(getent passwd | tr ":" " " | awk "\\\$3 >= \$(grep UID_MIN /etc/login.defs | cut -d " " -f 2) { print \\\$1 }"|sort)
for name in \$USERS; do
	if [ \$name != "nobody" ]
	then
		userdel -f -r \$name
	fi
done
# inserisce ${this._clientUserName} in /etc/sudoers
sed -i '/${this._clientUserName}/d' /etc/sudoers
groupadd -g 1000 ${this._clientUserName}
useradd -u 1000 -g 1000 -c "${this._clientUserFullName},,," -G $DEFAULTGROUPS -s /bin/bash -m ${this ._clientUserName}
echo -e "${this._clientPassword}\n${this._clientPassword}\n" | passwd ${this._clientUserName}
# read -p "A volte, qui occorre un controllo..."
adduser ${this._clientUserName} adm
adduser ${this._clientUserName} cdrom
adduser ${this._clientUserName} sudo
adduser ${this._clientUserName} dip
adduser ${this._clientUserName} plugdev
adduser ${this._clientUserName} lpadmin
adduser ${this._clientUserName} sambashare
dpkg-divert --remove --rename --quiet /usr/lib/update-notifier/apt-check
dpkg-divert --remove --rename --quiet /usr/sbin/update-initramfs
dpkg-divert --remove --rename --quiet /usr/sbin/anacron
sed 's/MODULES=most/MODULES=netboot/g' /etc/initramfs-tools/initramfs.conf > /tmp/a && mv /tmp/a /etc/initramfs-tools/initramfs.conf
sed 's/BOOT=local/BOOT=nfs/g' /etc/initramfs-tools/initramfs.conf > /tmp/a && mv /tmp/a /etc/initramfs-tools/initramfs.conf
#update-initramfs -t -c -k $(/bin/uname -r)
mkinitramfs -o /tmp/initrd.img-${this._kernelVer}
shadowconfig on
rm /root/.ssh -f -r
#read -p "Adesso puoi avviare un qualsiasi pc dalla rete via pxe con questa distribuzione. Premi un tasto per continuare..."`;

    writeAndShow(file, text);
  }

  tempInstallerRun(){
    let cmd="";
    console.log("### Avvio di tempinstaller ###")

    cmd=`mount -o bind /proc ${this._fsDir}/proc`;
    console.log(cmd);
    shell.exec(cmd);

    cmd=`mount -o bind /dev ${this._fsDir}/dev`;
    shell.exec(cmd);
    console.log(cmd);

    cmd=`mount -o bind /sys ${this._fsDir}/sys`;
    shell.exec(cmd);
    console.log(cmd);

    cmd=`chmod 755 ${this._fsDir}/tempinstaller`;
    shell.exec(cmd);
    console.log(cmd);

    cmd=`chroot ${this._fsDir} /tempinstaller`;
    shell.exec(cmd);
    console.log(cmd);

    shell.exec(`sleep 1`);
    cmd=`umount /srv/eggs/littlebird/proc`;
    shell.exec(cmd);
    console.log(cmd);
    shell.exec(`sleep 1`);

    cmd=`umount /srv/eggs/littlebird/dev`;
    shell.exec();
    console.log(cmd);
    shell.exec(`sleep 1`);

    cmd=`umount /srv/eggs/littlebird/sys`
    shell.exec(cmd);
    console.log(cmd);
    shell.exec(`sleep 1`);

    console.log("### Fine esecuzione di tempinstaller ###")
  }

  pxelinux() {
    let file = `/var/www/html/pxelinux.cfg/default`;
    let text = `
# Generated by eggs
DEFAULT vesamenu.c32
TIMEOUT 600
ONTIMEOUT BootLocal
PROMPT 0
KBDMAP it.kbd
DISPLAY display.txt
SAY Uso la tastiera e locale per italiano.
MENU TITLE Giant-Turle
MENU BACKGROUND wallpaper.png

LABEL little-bird
MENU LABEL little-bird
  KERNEL ${this._distroName}/vmlinuz-${this._kernelVer}
  APPEND root=/dev/nfs initrd=${this._fsDir}/initrd.img-${this._kernelVer} nfsroot=${this._netBootServer}:${this._fsDir}  ip=dhcp rw net.ifnames=0
	IPAPPEND 3

LABEL ========================================================================
LABEL Avvio da immagini ISO con memdisk - Selezionare l'immagine desiderata
LABEL ========================================================================
LABEL WinXP over HTTP
	MENU LABEL WinXP over HTTP
		LINUX /memdisk
		INITRD /iso/WinXP.iso
		APPEND iso

LABEL ------------------------------------------------------------------------
LABEL clonezilla-live-2.2.4-12-amd64.iso
	MENU LABEL clonezilla-live-2.2.4-12-amd64.iso
		LINUX /memdisk
		INITRD /iso/clonezilla-live-2.2.4-12-amd64.iso
		APPEND iso

LABEL ========================================================================
LABEL Boot locale
	localboot 0
	TEXT HELP
	Esegue il boot dal disco locale
	ENDTEXT

include common.cfg`;

    writeAndShow(file, text);

    shell.exec(`ln /usr/lib/PXELINUX/pxelinux.0  /var/www/html/pxelinux.0`);
    shell.exec(`ln /usr/lib/PXELINUX/lpxelinux.0  /var/www/html/lpxelinux.0`);
    //cp /opt/eggs/www/html/undionly.kpxe /var/www/html
    //cp /opt/eggs/www/html/wallpaper.png /var/www/html

    shell.exec(
      `ln /usr/lib/syslinux/modules/bios/vesamenu.c32 /var/www/html/vesamenu.c32`
    );
    shell.exec(
      `ln /usr/lib/syslinux/modules/bios/ldlinux.c32 /var/www/html/ldlinux.c32`
    );
    shell.exec(
      `ln /usr/lib/syslinux/modules/bios/libcom32.c32 /var/www/html/libcom32.c32`
    );
    shell.exec(
      `ln /usr/lib/syslinux/modules/bios/libutil.c32 /var/www/html/libutil.c32`
    );
    shell.exec(`ln /usr/lib/syslinux/memdisk /var/www/html/memdisk`);
  }

  exports() {
    let file = `/etc/exports`;
    let text = `
      # Generated by Eggs
      ${this._fsDir} ${this._net}/${this
      ._netNetmask}(rw,no_root_squash,async,no_subtree_check)
      ### Attenzione NON lasciare spazi tra le opzioni ###`;

    writeAndShow(file, text);
  }

  dnsmasq() {
    let file = `/etc/dnsmasq.conf`;
    let text = `
interface=ens18
domain=lan
dhcp-range=${this._net}, proxy, ${this._netNetmask}
pxe-service=x86PC, "Eggs and penguins...", pxelinux
enable-tftp
port=0
tftp-root=/var/www/html
# IF dhcp-match=set:ipxe,175 THEN
  dhcp-match=set:ipxe,175 # iPXE sends a 175 option.
        dhcp-boot=tag:!ipxe,undionly.kpxe
#ELSE
        dhcp-boot=http://${this._netBootServer}/lpxelinux.0
# ENDIF`;

    writeAndShow(file, text);
  }
}

function writeAndShow(file, text) {
  console.log(`### Creazione ${file}  ###`);
  console.log(text);
  fs.writeFile(file, text, function(err) {
    if (err) {
      console.log(`Errore durante la scrittura di ${file}, errore: ${err}`);
    }
  });
  console.log(`### Fine creazione ${file}  ###`);
  }



export default Eggs;
